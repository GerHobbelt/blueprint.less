// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
.clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (@grid-column-gutter / 2);
  padding-right: (@grid-column-gutter / 2);
  &:extend(.clearfix all);
}


/* Sets up basic grid floating and grid-column-gutter. */
.column () {
  float: left;
  margin-right: @grid-column-gutter;
}

.column-list(@type) when (@type = push) {
  float:left;
  position:relative;
}
.column-list(@type) when (@type = pull) {
  float:left;
  position:relative;
}
.column-list(@type) when (@type = span) {
  .column();
}

.calc-blueprint-column(@index, @type) when (@type = span) and (@index > 0) {
  .span-@{index} {
    width: (@index * @grid-column-width) + ((@index - 1) * @grid-column-gutter);
  }
}
.calc-blueprint-column(@index, @type) when (@type = push) {
  .push-@{index} {
    margin: 0 -((@index * @grid-column-width) + (@index * @grid-column-gutter)) unit(@line-height-base, em) ((@index * @grid-column-width) + (@index * @grid-column-gutter));
  }
}
.calc-blueprint-column(@index, @type) when (@type = pull) {
  .pull-@{index} {
    margin-left: -((@index * @grid-column-width) + (@index * @grid-column-gutter));
  }
}
.calc-blueprint-column(@index, @type) when (@type = append) {
  .append-@{index} {
    padding-right: (@index * @grid-column-width) + (@index * @grid-column-gutter);
  }
}
.calc-blueprint-column(@index, @type) when (@type = prepend) {
  .prepend-@{index} {
    padding-left: (@index * @grid-column-width) + (@index * @grid-column-gutter);
  }
}

// Basic looping in LESS
.loop-blueprint-columns(@index, @type) when (@index >= 0) {
  .calc-blueprint-column(@index, @type);
  // next iteration
  .loop-blueprint-columns((@index - 1), @type);
}

.make-blueprint-grid(){
  .loop-blueprint-columns(@grid-columns, span);
  .loop-blueprint-columns(@grid-columns, pull);
  .loop-blueprint-columns(@grid-columns, push);
  .loop-blueprint-columns(@grid-columns, append);
  .loop-blueprint-columns(@grid-columns, prepend);
}

.loop-blueprint-list(@type) {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index,@type) when (@index = 1) { // initial
    @item: ~".@{type}-@{index}";
    .col((@index + 1), @type, @item);
  };
  .col(@index, @type, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".@{type}-@{index}";
    .col((@index + 1), @type, ~"@{list}, @{item}");
  };
  .col(@index, @type, @list) when (@index > @grid-columns) { // terminal
@{list} {
  .column-list(@type);
}
  };
  .col(1,@type); // kickstart it
}

.make-blueprint-columns() {
  .loop-blueprint-list(span);
  .loop-blueprint-list(pull);
  .loop-blueprint-list(push);
}


// RESPONSIVE
.calc-grid-column(@index, @type) when (@type = span) and (@index > 0) {
  .span-@{index} {
    width: (@index * @column-width) + ((@index - 1) * @grid-column-gutter);
  }
}
.calc-grid-column(@index, @type) when (@type = push) {
  .push-@{index} {
    margin: 0 -((@index * @column-width) + (@index * @grid-column-gutter)) unit(@line-height-base, em) ((@index * @column-width) + (@index * @grid-column-gutter));
  }
}
.calc-grid-column(@index, @type) when (@type = pull) {
  .pull-@{index} {
    margin-left: -((@index * @column-width) + (@index * @grid-column-gutter));
  }
}
.calc-grid-column(@index, @type) when (@type = append) {
  .append-@{index} {
    padding-right: (@index * @column-width) + (@index * @grid-column-gutter);
  }
}
.calc-grid-column(@index, @type) when (@type = prepend) {
  .prepend-@{index} {
    padding-left: (@index * @column-width) + (@index * @grid-column-gutter);
  }
}

.loop-grid-columns(@index, @type) when (@index >= 0) {
  .calc-grid-column(@index, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @type);
}

.make-grid(){
  @media (min-width: @screen-sm-min) {
    @column-width: ((@container-sm - ((@grid-columns - 1) * @grid-column-gutter)) / @grid-columns);
    .loop-grid-columns(@grid-columns, span);
    .loop-grid-columns(@grid-columns, pull);
    .loop-grid-columns(@grid-columns, push);
    .loop-grid-columns(@grid-columns, append);
    .loop-grid-columns(@grid-columns, prepend);
  }
  @media (min-width: @screen-md-min) {
    @column-width: ((@container-md - ((@grid-columns - 1) * @grid-column-gutter)) / @grid-columns);
    .loop-grid-columns(@grid-columns, span);
    .loop-grid-columns(@grid-columns, pull);
    .loop-grid-columns(@grid-columns, push);
    .loop-grid-columns(@grid-columns, append);
    .loop-grid-columns(@grid-columns, prepend);
  }
  @media (min-width: @screen-lg-min) {
    @column-width: ((@container-lg - ((@grid-columns - 1) * @grid-column-gutter)) / @grid-columns);
    .loop-grid-columns(@grid-columns, span);
    .loop-grid-columns(@grid-columns, pull);
    .loop-grid-columns(@grid-columns, push);
    .loop-grid-columns(@grid-columns, append);
    .loop-grid-columns(@grid-columns, prepend);
  }
}

// RESPONSIVE FLEX

// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (@grid-column-gutter / 2);
  padding-right: (@grid-column-gutter / 2);
  &:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-column-gutter) {
  margin-left:  (@gutter / -2);
  margin-right: (@gutter / -2);
  &:extend(.clearfix all);
}

// Generate the extra small columns
  .make-xs-column(@columns; @gutter: @grid-column-gutter) {
  position: relative;
  float: left;
  width: percentage((@columns / @grid-columns));
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);
}
.make-xs-column-offset(@columns) {
  @media (min-width: @screen-xs-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-push(@columns) {
  @media (min-width: @screen-xs-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-pull(@columns) {
  @media (min-width: @screen-xs-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the small columns
  .make-sm-column(@columns; @gutter: @grid-column-gutter) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

@media (min-width: @screen-sm-min) {
  float: left;
  width: percentage((@columns / @grid-columns));
}
}
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the medium columns
  .make-md-column(@columns; @gutter: @grid-column-gutter) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

@media (min-width: @screen-md-min) {
  float: left;
  width: percentage((@columns / @grid-columns));
}
}
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the large columns
  .make-lg-column(@columns; @gutter: @grid-column-gutter) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

@media (min-width: @screen-lg-min) {
  float: left;
  width: percentage((@columns / @grid-columns));
}
}
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Framework grid generation
//

.float-flex-grid-columns(@type, @class) {
  .col(@index) when (@index = 1) { // initial
    @item: ~".@{type}-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".@{type}-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
@{list} {
  .column-list(@type);
}
  }
  .col(1); // kickstart it
  }

.calc-flex-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .span-@{class}-@{index} {
    width: calc(percentage((@index / @grid-columns))~" - @{grid-column-gutter}");
  }
}
.calc-flex-grid-column(@index, @class, @type) when (@type = push) {
  .push-@{class}-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-flex-grid-column(@index, @class, @type) when (@type = pull) {
  .pull-@{class}-@{index} {
    margin: 0 -(percentage((@index / @grid-columns))) unit(@line-height-base, em) percentage((@index / @grid-columns));
  }
}
.calc-flex-grid-column(@index, @class, @type) when (@type = append) {
  .append-@{class}-@{index} {
    padding-right: percentage((@index / @grid-columns));
  }
}
.calc-flex-grid-column(@index, @class, @type) when (@type = prepend) {
  .prepend-@{class}-@{index} {
    padding-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.loop-flex-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-flex-grid-column(@index, @class, @type);
  // next iteration
  .loop-flex-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-flex-grid(@class) {
  .float-flex-grid-columns(span, @class);
  .loop-flex-grid-columns(@grid-columns, @class, width);

  .float-flex-grid-columns(pull, @class);
  .loop-flex-grid-columns(@grid-columns, @class, pull);

  .float-flex-grid-columns(push, @class);
  .loop-flex-grid-columns(@grid-columns, @class, push);

  .loop-flex-grid-columns(@grid-columns, @class, append);
  .loop-flex-grid-columns(@grid-columns, @class, prepend);
}